#ifndef EVENTSHANDLER_H
#define EVENTSHANDLER_H

#include "commonincludings.h"
#include "ieventshandler.h"

class AppWindow;

//! Implements SDL events handler.
class EventsHandler : public IEventsHandler
{
public:
    EventsHandler();                                                //! Default constructor.
    EventsHandler( const QString &description );                    //! Parameterized constructor.

    virtual ~EventsHandler() {}

    virtual void handle(AppWindow *window) override;                //! Handles SDL events.

    const EventsHandler & operator = (const EventsHandler &handler);//! Operator " =  ".

public:
    const SDL_Event & getSDLEvent() const { return m_sdlEvent; }    //! Returns SDL event member.
    SDL_Event & getSDLEvent() { return m_sdlEvent; }                //! Returns SDL event member, overloaded function.

    uint getName() const { return m_name; }                         //! Returns autogenerated name of events handler.

    const QString & getDescription() const { return m_description; }//! Returns events handler description.
    void setDescription(const QString &description);                //! Sets events handler description.

public:
    static uint getCounter() { return counter; }                    //! Returns number of created SDL events objects.

    static std::shared_ptr<EventsHandler> createObject();           //! Creates new events handler and returns pointer to it.

protected:
    EventsHandler( const EventsHandler &handler );                  //! Copying constructor.

    void setSDLEvent(const SDL_Event &sdlEvent) { m_sdlEvent = sdlEvent; }//! Sets SDL event member.

private:
    static uint counter;        //! Counter of created SDL events objects.

private:
    SDL_Event    m_sdlEvent;    //! SDL event member.

    uint         m_name;        //! Autogenerated name of events handler.

    QString      m_description; //! Events handler description.
};

#endif // EVENTSHANDLER_H
