#ifndef ISHADER_H
#define ISHADER_H

#include "commonincludings.h"

//! Interface for OpenGL shader implementation.
class IShader
{
public:
    virtual GLenum getType() const = 0;                    //! Returns shader type.
    virtual GLuint create() noexcept(false) = 0;           //! Creates and compiles shader, returns its id generated by OpenGL.
    virtual GLuint remove(GLuint programId) = 0;           //! Detaches and deletes shader from OpenGL context and returns its id. Returns 0 if shader was not deleted.
    virtual const QString & read() noexcept(false) = 0;    //! Reads shader source code and returns it.

    virtual ~IShader() {}

protected:
    virtual GLuint create(GLenum type) noexcept(false) = 0;//! Creates and compiles shader of given type, returns its id generated by OpenGL.
};

#endif // ISHADER_H
