#ifndef COMMONDEFINITIONS_H
#define COMMONDEFINITIONS_H

#define BUFFER_OFFSET(i)   ((char *)NULL + (i)) //! Buffer offset macros.

#include "auxiliary.h"

namespace  common_definitions                   //! Namespace for common definitions used in the program.
{
    // Vertices section.
    const GLuint NUM_OF_COORDINATE_COMPONENTS_PER_VERTEX  =  3;                                      //! Number of coordinates components of GLfloat type per vertex
    const GLuint NUM_OF_COLOR_COMPONENTS_PER_VERTEX       =  4;                                      //! Number of color components of GLfloat type per vertex.
    const GLuint NUM_OF_NORMAL_COMPONENTS_PER_VERTEX      =  3;                                      //! Number of normal components of GLfloat type per vertex.
    const GLuint NUM_OF_TOTAL_COMPONENTS_PER_VERTEX       =  NUM_OF_COORDINATE_COMPONENTS_PER_VERTEX //! Number of total components of GLfloat type per vertex.
                                                           + NUM_OF_COLOR_COMPONENTS_PER_VERTEX
                                                           + NUM_OF_NORMAL_COMPONENTS_PER_VERTEX;

    // Mesh section.
    const GLuint NUM_OF_BUFFERS_PER_MESH  =  2; //! Number of generated by OpenGL buffers per mesh.

    struct MeshStatus {
        enum Status                             //! Mesh object status bitmask enum.
        {
            FINE                              = 0x00,   // Mesh object is fine.
            INVALID_VBO_BUFFER_POINTER        = 0x01,   // Invalid pointer to OpenGL VBO buffer.
            INVALID_IBO_BUFFER_POINTER        = 0x02,   // Invalid pointer to OpenGL IBO buffer.
            INVALID_VBO_UNMAPPING             = 0x04,   // Invalid OpenGL VBO buffer unmapping.
            INVALID_IBO_UNMAPPING             = 0x08,   // Invalid OpenGL IBO buffer unmapping.
            BUFFERS_NOT_GENERATED             = 0x10,   // Mesh VBO or IBO OpenGL buffers were not generated.
            NO_VBO_DATA                       = 0x20,   // Mesh VBO data array is empty.
            NO_IBO_DATA                       = 0x40    // Mesh IBO data array is empty.
        };
    };


    // Camera section.
    enum class CameraMode : uint                //! Camera projection mode enum.
    {
        ORTHOGRAPHIC            = 0,            // Orthographic projection mode.
        PERSPECTIVE             = 1             // Perspective projection mode.
    };

    const GLfloat ORTHOGRAPHIC_CAMERA_SCALE  = 10.0f; // Orthographic scale factor.


    // Shader section.
    struct ShaderStatus {
        enum Status                             //! Shader object status bitmask enum.
        {
            FINE                              = 0x00,   // Shader object is fine.
            INVALID_SOURCE                    = 0x01,   // Invalid shader source.
            SHADER_NOT_CREATED                = 0x02,   // Shader was not created.
            NO_SHADER_DATA                    = 0x04    // Shader data string is empty.
        };
    };

    struct Attribute {
        enum Position                           //! Shader attribute position enum.
        {
            COORDINATE                        = 0,      // Coordinate position.
            COLOR                             = 1,      // Color position.
            NORMAL                            = 2       // Normal position.
        };
    };

    struct Uniform {                            //! Shader uniforms names struct.
        static constexpr const GLchar *PROJECTION                = "uniProjection";             // Projection matrix uniform name.
        static constexpr const GLchar *VIEW                      = "uniView";                   // View matrix uniform name.
        static constexpr const GLchar *VIEW_MODEL                = "uniViewModel";              // View model matrix uniform name.
        static constexpr const GLchar *PROJECTION_VIEW           = "uniProjectionView";         // Projection view matrix uniform name.
        static constexpr const GLchar *PROJECTION_VIEW_MODEL     = "uniProjectionViewModel";    // Projection view model matrix uniform name.
        static constexpr const GLchar *MODEL                     = "uniModel";                  // Model matrix uniform name.
        static constexpr const GLchar *INV_PROJECTION_VIEW       = "uniInvProjectionView";      // Inverse projection view matrix uniform name.
        static constexpr const GLchar *INV_PROJECTION            = "uniInvProjection";          // Inverse projection matrix uniform name.
        static constexpr const GLchar *SHADOW_PROJECTION_VIEW    = "uniShadowProjectionView";   // Shadow projection view matrix uniform name.

        static constexpr const GLchar *FRAME_WIDTH               = "frameWidth";                // Frame width uniform name.
        static constexpr const GLchar *FRAME_HEIGHT              = "frameHeight";               // Frame height uniform name.

        static constexpr const GLchar *DIFFUSE_TEXTURE_2D        = "uniDiffuseTexture2D";       // Diffuse 2D texture uniform name.
        static constexpr const GLchar *NORMALS_TEXTURE_2D        = "uniNormalsTexture2D";       // Normals 2D texture uniform name.
        static constexpr const GLchar *DEPTH_TEXTURE_2D          = "uniDepthTexture2D";         // Depth 2D texture uniform name.
        static constexpr const GLchar *LIGHT_TEXTURE_2D          = "uniLightTexture2D";         // Light 2D texture uniform name.
        static constexpr const GLchar *SHADOW_TEXTURE_2D         = "uniShadowTexture2D";        // Shadow map 2D texture uniform name.
        static constexpr const GLchar *SOME_TEXTURE_2D           = "uniSomeTexture2D";          // Some 2D texture uniform name.
        static constexpr const GLchar *DIFFUSE_LIGHT_COMBINED_2D = "uniDiffuseLightCombined2D"; // Diffuse light combined uniform name.

        static constexpr const GLchar *LIGHT_RADIUS              = "uniLightRadius";            // Light radius uniform name.
        static constexpr const GLchar *LIGHT_COLOR               = "uniLightColor";             // Light color uniform name.
        static constexpr const GLchar *LIGHT_DIRECTION           = "uniLightDirection";         // Light direction uniform name.
        static constexpr const GLchar *LIGHT_POSITION            = "uniLightPosition";          // Light source position uniform name.

        static constexpr const GLchar *CLEAR_COLOR               = "uniClearColor";             // Clear color uniform name.

        static constexpr const GLchar *FOCAL_DISTANCE            = "uniFocalDistance";          // Focal distance uniform name.
        static constexpr const GLchar *FOCAL_RANGE               = "uniFocalRange";             // Focal range uniform name.
    };


    // Program section.
    struct ProgramStatus {
        enum Status                             //! Program object status bitmask enum.
        {
            FINE                              = 0x00,   // Program object is fine.
            NOT_CREATED                       = 0x01,   // Program wat not created.
            NOT_LINKED                        = 0x02,   // Program was not linked.
        };
    };


    // Shape section.
    const GLuint NUM_OF_SHAPE_DRAW_ATTEMPTS = 10;       //! Number of attempts to draw a shape.

    struct ShapeStatus {
        enum Status                             //! Shape object status bitmask enum.
        {
            FINE                              = 0x00,   // Shape object is fine.
            INVALID_BUFFERS                   = 0x01,   // Shape buffers checking with glIsBuffer() returned GL_FALSE NUM_OF_SHAPE_DRAW_ATTEMPTS times.
            NO_PROGRAM                        = 0x02    // Shape has no shading program pointer.
        };
    };


    // Renderer section.
    const GLsizei NUM_OF_RENDERER_TEXTURES  = 8;        //! Number of renderer textures.
    const GLuint  NUM_OF_RENDERER_RECT_DRAW_ATTEMPTS = 10;//! Number of attempts to draw renderer rectangle.
    const GLuint  NUM_OF_RENDERER_LIGHT_COMBINE_ATTEMPTS = 10;//! Number of attempts to combine light & diffuse.
    const GLuint  NUM_OF_RENDERER_WRITING_BLUR_RANGE_ATTEMPTS = 10; //! Number of attempts to write blur range.

    const GLfloat FOCAL_DISTANCE              = 10;     //! Focal distance.
    const GLfloat FOCAL_RANGE                 = 5;      //! Focal range.

    struct RendererPrograms {
        enum Programs                           //! Scene renderer programs enum.
        {
            GEOMETRY_RENDERER                 = 1,      // Geometry rendening program.
            POINT_LIGHT_RENDERER              = 2,      // Point light rendening program.
            DIRECT_LIGHT_RENDERER             = 3,      // Direct light rendening program.
            LIGHT_COMBINER                    = 4,      // Light combiner rendening program.
            POST_PROCESS                      = 5,      // Post process rendening program.
            TEXTURE_2D_RENDERER               = 6,      // 2D texture rendening program.
            SHADOW_DIRECT_RENDERER            = 7,      // Direct light shadow map rendering program.
            BLUR_RANGER                       = 8       // Depth of field blur ranger rendering program.
        };
    };

    struct RendererStatus {
        enum Status                             //! Scene renderer status enum bitmask.
        {
            FINE                              = 0x00,   // Renderer object is fine.
            BUFFERS_NOT_GENERATED             = 0x01,   // Renderer FBO and textures were not generated.
            FBO_NOT_COMPLETED                 = 0x02,   // Renderer FBO is incompleted while checking with glCheckFramebufferStatus().
            NO_SCENE                          = 0x04,   // Renderer object has no scene pointer.
            INVALID_RECTANGLE_BUFFERS         = 0x08,   // Renderer rectangle buffers checking with glIsBuffer() returned GL_FALSE NUM_OF_RENDERER_RECT_DRAW_ATTEMPTS times.
            NO_RENDERER_PROGRAM               = 0x10    // Renderer has no rendening program.
        };
    };


    // RenderTarget section.
    struct TargetTextures {
        enum Textures                           //! Render target textures enum.
        {
            DIFFUSE                           = 1,      // Render target id of diffuse texture.
            NORMALS                           = 2,      // Render target id of normals texture.
            DEPTH                             = 3,      // Render target id of depth texture.           
            LIGHT                             = 4,      // Render target id of light texture.
            RANGE_OF_DEPTH_BLUR               = 5,      // Render target id of range of depth blur texture.
            DIFFUSE_LIGHT_COMBINED            = 6,      // Render target id of diffuse combined with light texture.
            RESULT                            = 7,      // Render target id of result texture.
            SHADOW_DIRECT                     = 8       // Render target id of direct light shadow map texture.
        };
    };

    const GLfloat SHADOW_MAP_WIDTH            = 2048.0f; // Width of shadow map.
    const GLfloat SHADOW_MAP_HEIGHT           = 2048.0f; // Height of shadow map.


    // AppWindow section.
    struct AppWindowStatus {
        enum Status                             //! Application window status enum bitmask.
        {
            FINE                              = 0x00,   // Application window is fine.
            NOT_CREATED                       = 0x01,   // Application window was not created.
            NOT_RUNNING                       = 0x02,   // Application window is not running.
            INVALID_EVENTS_HANDLER_POINTER    = 0x04,   // Invalid pointer to events handler object.
            INVALID_OPENGL_CONTEXT_POINTER    = 0x08,   // Invalid pointer to OpenGL context object.
            NO_ENGINE_POINTER                 = 0x10,   // Engine pointer not set.
            INVALID_WINDOW_KEY                = 0x20    // Engine has no window object with provided key.
        };
    };


    // OpenGLContext section.
    struct OpenGLContextStatus {
        enum Status                             //! OpenGL context status enum bitmask.
        {
            FINE                              = 0x00,   // OpenGL context is fine.
            NOT_CREATED                       = 0x01,   // OpenGL context not created.
            INVALID_WINDOW_POINTER            = 0x02,   // Invalid application window pointer.
            INVALID_MAKING_CURRENT            = 0x04,   // Invalid setting up an OpenGL context for rendering into an SDL OpenGL window.
            INVALID_GLEW_INITIALIZATION       = 0x08,   // Invalid Glew initialization.
            NO_ENGINE_POINTER                 = 0x10    // Engine pointer not set.
        };
    };


    // Engine section.
    struct EngineStatus {
        enum Status                             //! Engine status enum bitmaks.
        {
            FINE                              = 0x00,   // Engine is fine.
            NOT_INITED                        = 0x01    // Engine not initialized.
        };
    };


    // Engine context section.
    struct EngineContextStatus {
        enum Status                             //! Engine context status enum bitmask.
        {
            FINE                              = 0x000,  // Engine context is fine.
            NO_ENGINE                         = 0x001,  // Engine context has no engine pointer.
            INVALID_SELECTED_WINDOW           = 0x002,  // Invalid engine context selected window pointer.
            INVALID_SELECTED_SCENE            = 0x004,  // Invalid engine context selected scene pointer.
            INVALID_SELECTED_OPENGL_CONTEXT   = 0x008,  // Invalid engine context selected OpenGL context pointer.
            INVALID_SHAPES_FACTORY            = 0x010,  // Invalid shapes factory.
            INVALID_SCENES_FACTORY            = 0x020,  // Invalid scenes factory.
            INVALID_PROGRAMS_FACTORY          = 0x040,  // Invalid programs factory.
            INVALID_EVENTS_HANDLERS_FACTORY   = 0x080,  // Invalid events handlers factory.
            INVALID_WINDOWS_FACTORY           = 0x100,  // Invalid windows factory.
            INVALID_OPENGL_CONTEXTS_FACTORY   = 0x200,  // Invalid OpenGL contexts factory.
            INVALID_POINT_LIGHTS_FACTORY      = 0x400,  // Invalid point lights factory.
            INVALID_DIRECT_LIGHTS_FACTORY     = 0x800   // Invalid direct light factory.
        };
    };


    // Light section:
    const GLuint NUM_OF_LIGHT_DRAW_ATTEMPTS   = 10;     //! Number of attempts to draw light object.

    enum class LightType : uint                 //! Light type enum.
    {
        DIRECT                                = 0,      // Direct light type.
        POINT                                 = 1       // Point light type.
    };

    struct LightStatus {
        enum Status                             //! Light status enum bitmask.
        {
            FINE                              = 0x00,   // Light object is fine.
            INVALID_BUFFERS                   = 0x01,   // Light object VBO or IBO buffers are invalid.
            NO_PROGRAM                        = 0x02    // Light object has no shading program pointer.
        };
    };
}

namespace com_defs = common_definitions;        //! Shorter alias for common definitions namespace.


#endif // COMMONDEFINITIONS_H
