#ifndef COMMONEXCEPTION_H
#define COMMONEXCEPTION_H

#include "commonincludings.h"

//! Base class for application exceptions.
class CommonException : public std::exception
{
public:
    CommonException() noexcept;                                                            //! Default constructor.
    CommonException( const QString &message ) noexcept;                                    //! Parameterized constructor.

    CommonException( const CommonException &exception ) noexcept;                          //! Copying constructor.

    virtual ~CommonException() {}

    virtual const char * what() const noexcept override;                                   //! Returns exception info.

    const CommonException & operator = (const CommonException &exception) noexcept;        //! Operator " =  ".
    bool  operator == (const CommonException &exception) const noexcept;                   //! Operator " == ".
    bool  operator != (const CommonException &exception) const noexcept;                   //! Operator " != ".

public:
    const QString & getMessage() const noexcept { return m_message; }                      //! Returns exception message.
    void  setMessage(const QString &message) noexcept;                                     //! Sets exception message.    

    uint getName() const noexcept { return m_name; }                                       //! Returns autogenerated name of exception.

public:
    static uint  getConter() { return counter; }                                           //! Returns number of created exceptions objects.

protected:
    virtual const QByteArray & fillInfoBytes() noexcept;                                   //! Fills info bytes array with bytes and returns it.

    const QByteArray & getInfoBytes() const noexcept { return m_infoBytes; }               //! Returns info bytes.
    void  setInfoBytes(const QByteArray &infoBytes) noexcept { m_infoBytes = infoBytes; }  //! Sets info bytes.    

private:
    static uint  counter;       //! Counter of created application exceptions objects.

private:
    QString      m_message;     //! Exception message string.
    QByteArray   m_infoBytes;   //! Exception info string bytes.

    uint         m_name;        //! Autogenerated name of exception.

};

#endif // COMMONEXCEPTION_H
