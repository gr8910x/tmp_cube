#ifndef RENDERER_H
#define RENDERER_H

#include "commonincludings.h"
#include "irenderer.h"
#include "rendertarget.h"
#include "mesh.h"

class Scene;
class Program;

//! Implements OpenGL scene renderer.
class Renderer : public IRenderer
{
public:
    Renderer();                                            //! Default constructor.
    Renderer( Scene *scene );                              //! Parameterized constructor.
    Renderer( const QHash<com_defs::RendererPrograms::Programs, std::weak_ptr<Program> > &programs );//! Parameterized constructor.
    Renderer( const QString &description );                //! Parameterized constructor.
    Renderer( Scene *scene                                                                           //! Parameterized constructor.
            , const QHash<com_defs::RendererPrograms::Programs, std::weak_ptr<Program> > &programs
            );
    Renderer( Scene         *scene                         //! Parameterized constructor.
            , const QString &description
            );
    Renderer( const QHash<com_defs::RendererPrograms::Programs, std::weak_ptr<Program> > &programs   //! Parameterized constructor.
            , const QString &description
            );
    Renderer( Scene         *scene                                                                   //! Parameterized constructor.
            , const QHash<com_defs::RendererPrograms::Programs, std::weak_ptr<Program> > &programs
            , const QString &description
            );

    Renderer( const Renderer &renderer );                  //! Copying constructor.

    virtual ~Renderer() {}

    virtual GLuint genBuffers() noexcept(false) override;  //! Generates FBO, textures and rectangle VBO & IBO of renderer and returns FBO id.
    virtual GLuint deleteBuffers() override;               //! Deletes FBO, textures and rectangle VBO & IBO of renderer and returns id of deleted FBO.

    virtual void renderGBuffer() noexcept(false) override; //! Renders geometry buffer.
    virtual void renderLBuffer() noexcept(false) override; //! Renders light buffer.
    virtual void postProcess() noexcept(false) override;   //! Provides post processing.
    virtual void finalRender() noexcept(false) override;   //! Provides rendering to screen buffer.

    const Renderer & operator = (const Renderer &renderer);//! Operator " =  ".
    bool  operator == (const Renderer &renderer) const;    //! Operator " == ".
    bool  operator != (const Renderer &renderer) const;    //! Operator " != ".

public:
    const Scene * getScene() const { return m_scene; }     //! Returns pointer to a rendered scene object.
    Scene * getScene() { return m_scene; }                 //! Returns pointer to a rendered scene object, overloaded function.
    void setScene(Scene *scene);                           //! Sets pointer to a rendered scene object.

    const RenderTarget & getRenderTarget() const { return m_target; }//! Returns render target object containing textures ids and color attachments.

    GLuint getName() const { return m_name; }              //! Returns autogenerated renderer name.
    GLuint getFBOId() const { return m_fboId; }            //! Returns generated by OpenGL id of this renderer FBO.

    const QHash<com_defs::RendererPrograms::Programs, std::weak_ptr<Program> > & getPrograms() const;      //! Returns QHash of renderer shading programs pointers.
    QHash<com_defs::RendererPrograms::Programs, std::weak_ptr<Program> > & getPrograms();                  //! Returns QHash of renderer shading programs pointers, overloaded function.
    void setPrograms(const QHash<com_defs::RendererPrograms::Programs, std::weak_ptr<Program> > &programs);//! Sets QHash of renderer shading programs pointers.

    const Mesh & getRectMesh() const { return m_rectMesh; }//! Returns renderer rectangle mesh.
    Mesh & getRectMesh() { return m_rectMesh; }            //! Returns renderer rectangle mesh, overloaded function.

    uint getStatus() const { return m_status; }            //! Returns renderer object status bitmask.

    const QString & getDescription() const { return m_description; }//! Returns renderer description.
    void setDescription(const QString &description);       //! Sets renderer description.

public:
    static GLuint getCounter() { return counter; }         //! Returns number of created renderer objects.

protected:
    void setRenderTarget(const RenderTarget &target) { m_target = target; }//! Sets render target object containing textures ids and color attachments.
    void setFBOId(GLuint fboId) { m_fboId = fboId; }       //! Sets generated by OpenGL id of this renderer FBO.
    void setStatus(uint status) { m_status = status; }     //! Sets renderer object status bitmask.

    void setRectMesh(const Mesh &rectMesh) { m_rectMesh = rectMesh; }  //! Sets renderer rectangle mesh.

    void drawTexture2D(GLuint textureId,    const char *textureUniform, std::weak_ptr<Program> weakProgram) noexcept(false);//! Draws 2D texture.
    void combineLight( GLuint diffuseTexId, const char *diffuseUniform  //! Combines light and diffuse 2D textures.
                     , GLuint lightTexId,   const char *lightUniform
                     , GLenum resultTextureAttachment
                     , std::weak_ptr<Program> weakProgram ) noexcept(false); //! Writes blur range into alpha channel.
    void writeBlurRange( GLuint  depthTextureId,        const char *depthUniform
                       , GLuint  diffuseLightTextureId, const char *diffuseLightUniform
                       , GLenum  resultTextureAttachment
                       , GLfloat focalDistance
                       , GLfloat focalRange
                       , std::weak_ptr<Program> weakProgram ) noexcept(false);

private:
    static GLuint counter;     //! A counter of created renderer objects.

private:
    Scene *      m_scene;      //! A pointer to a rendered scene object.

    RenderTarget m_target;     //! Render target object containing textures ids and color attachments.

    GLuint       m_name;       //! Autogenerated renderer name.
    GLuint       m_fboId;      //! Generated by OpenGL id of this renderer FBO.

    QHash<com_defs::RendererPrograms::Programs, std::weak_ptr<Program> > m_programs; //! QHash of renderer shading programs pointers.

    Mesh         m_rectMesh;   //! Renderer rectangle mesh, used for drawing 2D textures.

    uint         m_status;     //! Renderer object status bitmask.

    QString      m_description;//! Description of this renderer.
};

#endif // RENDERER_H
