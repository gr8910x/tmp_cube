#ifndef PROGRAM_H
#define PROGRAM_H

#include "commonincludings.h"
#include "vertexshader.h"
#include "fragmentshader.h"
#include "iprogram.h"

class VertexShader;
class FragmentShader;

//! Implements OpenGL shader program.
class Program : public IProgram
{
public:
    Program();                                                                   //! Default constructor.
    Program( const VertexShader    &vertexShader                                 //! Parameterized constructor.
           , const FragmentShader  &fragmentShader
           );
    Program( const VertexShader    &vertexShader                                 //! Parameterized constructor.
           , const FragmentShader  &fragmentShader
           , const QString         &description
           );
    Program( const QString         &vertexPath                                   //! Parameterized constructor.
           , const QString         &fragmentPath
           );
    Program( const QString         &vertexPath                                   //! Parameterized constructor.
           , const QString         &fragmentPath
           , const QString         &description
           );
    Program( const QString         &vertexPath                                   //! Parameterized constructor.
           , const QString         &vertexDescription
           , const QString         &fragmentPath
           , const QString         &fragmentDescription
           , const QString         &programDescription
           );

    virtual ~Program();

    virtual GLuint create() noexcept(false) override;                            //! Reads and compiles shaders, creates program and returns its id.
    virtual GLuint link() noexcept(false) override;                              //! Links program to OpenGL context and returns its id.
    virtual GLuint use() noexcept(false) override;                               //! Marks this program to be used in OpenGL scene drawing operations. Returns program id.
    virtual GLuint stopUse() override;                                           //! Stops using this program, returns program id.
    virtual GLuint remove() override;                                            //! Deletes program and returns its id.

    const Program & operator = (const Program &program);                         //! Operator " =  ".
    bool  operator == (const Program &program) const;                            //! Operator " == ".
    bool  operator != (const Program &program) const;                            //! Operator " != ".

public:
    const VertexShader & getVertexShader() const { return m_vertexShader; }      //! Returns OpenGL vertex shader object.
    VertexShader & getVertexShader() { return m_vertexShader; }                  //! Returns OpenGL vertex shader object, overloaded function.
    void  setVertexShader(const VertexShader &vertexShader);                     //! Sets OpenGL vertex shader object.

    const FragmentShader & getFragmentShader() const { return m_fragmentShader; }//! Returns OpenGL fragment shader object.
    FragmentShader & getFragmentShader() { return m_fragmentShader; }            //! Returns OpenGL fragment shader object, overloaded function.
    void  setFragmentShader(const FragmentShader &fragmentShader);               //! Sets OpenGL fragment shader object.

    GLuint getName() const { return m_name; }                                    //! Returns autogenerated program name.
    GLuint getId() const { return m_id; }                                        //! Returns generated by OpenGL program id.

    const QString & getDescription() const { return m_description; }             //! Returns program description string.
    void  setDescription(const QString &description);                            //! Sets program description string.

    bool  isUsing() { return m_using; }                                          //! Returns true if program is being used.

    uint getStatus() const { return m_status; }                                  //! Returns program status bitmask.

public:
    static GLuint  getCounter() { return counter; }                        //! Returns number of created program objects.

    static std::shared_ptr<Program> createObject();                        //! Creates new program and returns pointer to it.

protected:
    Program( const Program &program );                                     //! Copying constructor.

    void setId(GLuint id) { m_id = id; }                                   //! Sets generated by OpenGL program id.
    void setStatus(uint status) { m_status = status; }                     //! Sets program status bitmask.
    void setUsing(bool beingUsed) { m_using = beingUsed; }                 //! Sets indicator of whether program is being used.

private:
    static GLuint  counter;                 //! Counter of created program objects.

private:
    VertexShader        m_vertexShader;     //! OpenGL vertex shader object.
    FragmentShader      m_fragmentShader;   //! OpenGL fragment shader object.

    GLuint              m_id;               //! Generated by OpenGL program id, 0 by default.
    GLuint              m_name;             //! Autogenerated program name.

    QString             m_description;      //! Program description string.

    bool                m_using;            //! Indicates whether this program is being used.

    uint                m_status;           //! Program status bitmask.
};

#endif // PROGRAM_H
