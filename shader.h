#ifndef SHADER_H
#define SHADER_H

#include "commonincludings.h"
#include "ishader.h"

//! Abstract base class for OpenGL shaders.
class Shader : public IShader
{
public:
    Shader();                                                       //! Default constructor.
    Shader( const QString  &path );                                 //! Parameterized constructor.
    Shader( const QString  &path                                    //! Parameterized constructor.
          , const QString  &description );

    Shader( const Shader &shader );                                 //! Copying constructor.

    virtual ~Shader() {}

    virtual GLenum getType() const override = 0;                    //! Returns shader type.
    virtual GLuint create() noexcept(false) override = 0;           //! Creates and compiles shader, returns its id generated by OpenGL.
    virtual GLuint remove(GLuint programId) override;               //! Detaches and deletes shader from OpenGL context and returns its id. Returns 0 if shader was not deleted.
    virtual const QString & read() noexcept(false) override;        //! Reads shader source code and returns it.

    const Shader & operator = (const Shader &shader);               //! Operator " =  ".
    bool  operator == (const Shader &shader) const;                 //! Operator " == ".
    bool  operator != (const Shader &shader) const;                 //! Operator " != ".

public:
    const QString & getPath() const { return m_path; }              //! Returns path to the shader text file.
    void  setPath(const QString &path);                             //! Sets path to the shader text file.

    const QString & getSource() const { return m_source; }          //! Returns shader source code.

    GLuint getId() const { return m_id; }                           //! Returns generated by OpenGL id of shader.
    GLuint getName() const { return m_name; }                       //! Returns autogenerated name of shader.

    const QString & getDescription() const { return m_description; }//! Returns description of shader.
    void  setDescription(const QString &description);               //! Sets description of shader.

    bool isCreated() const;                                         //! Returns true if shader was created.

    uint getStatus() const { return m_status; }                     //! Returns shader object status bitmask.

public:
    static GLuint getCounter() { return counter; }                  //! Returns number of created shaders objects.

protected:
    virtual GLuint create(GLenum type) noexcept(false) override;    //! Creates and compiles shader of given type, returns its id generated by OpenGL.

    void setSource(const QString &source);                          //! Sets shader source code.
    void setId(GLuint id) { m_id = id; }                            //! Sets generated by OpenGL id of shader.
    void setStatus(uint status) { m_status = status; }              //! Sets shader object status bitmask.

private:
    static GLuint  counter;   //! Counter of created shaders objects.

private:
    QString     m_path;       //! Path to the shader text file.
    QString     m_source;     //! Shader source code.

    GLuint      m_id;         //! Generated by OpenGL id of shader.
    GLuint      m_name;       //! Autogenerated name of shader.

    QString     m_description;//! Description of shader.

    uint        m_status;     //! Shader object status bitmask.
};

#endif // SHADER_H
